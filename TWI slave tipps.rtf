{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red242\green242\blue242;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf0 \cb2 \expnd0\expndtw0\kerning0
Hallo,\
\
nach langer Zeit melde ich mich mal wieder zu Wort.\
Ich habe ja auch diese Routinen verwendet, nur mit dem Unterschied das \
der Slave bei mir nicht gepollt wird sondern per ISR das Ganze erledigt. \
Dieses H\'e4ngenbleiben hatte ich auch bzw. konnte der Slave einmalig eine \
Anfrage vom Master beantworten und danach ging bei der Kommunikation \
nichts mehr. Die Controller ansich waren aber noch arbeitsf\'e4hig und \
andere Funktionen gingen noch. Nach langer Suche bin ich \'fcber \
Debugausgaben dann hinter das Problem gekommen. Der Slavecontroller \
setzt nach dem ersten Aufrufen der ISR das TWI-Interrupt-Enable-Bit \
wieder zur\'fcck. Damit ist dann im n\'e4chsten Zyklus der Slave "taub" und \
beantwortet keine TWI-Anfragen mehr. Warum dieses Bit zur\'fcckgesetzt wird \
ist mir noch unerkl\'e4rlich. Ich habe noch nichts dar\'fcber gefunden. Als \
Abhilfe habe ich einfach beim Aufruf der Stop-Condition das Bit wieder \
gesetzt und damit funktioniert die Kommunikation schon seit l\'e4ngerem \
ohne Probleme.\
\
void TWIS_Stop (void)\
\{\
   TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA)|(1<<TWIE);\
\}\
\
Delay's gibt es nur beim Systemstart des Slaves. Diese sind aber \
eigentlich gar nicht relevant weil der Slave auch ohne Master sauber \
hochl\'e4uft und ja sowieso selbst nichts aktiv auf den Bus sendet. Als \
Master habe ich den Webserver von Ulrich Radig verwendet und die TWI \
hinzugef\'fcgt.}